=============================================================================
List of generated methods in project: DMK_ALV_77B_001

This text description is generated by Processor Expert. Do not modify it.
=============================================================================

Module "pin_mux"   (component PinSettings)
   - pin_mux_PINS_DRV_Init -This function configures the pins with the options provided in the provided structure
   - pin_mux_PINS_DRV_SetPullSel -This function configures the internal resistor
   - pin_mux_PINS_DRV_SetMuxModeSel -This function configures the pin muxing
   - pin_mux_PINS_DRV_SetPinIntSel -This function configures the port pin interrupt/DMA request
   - pin_mux_PINS_DRV_GetPinIntSel -This function gets the current port pin interrupt/DMA request configuration
   - pin_mux_PINS_DRV_ClearPinIntFlagCmd -This function clears the individual pin-interrupt status flag
   - pin_mux_PINS_DRV_EnableDigitalFilter -This function enables digital filter feature for digital pin muxing
   - pin_mux_PINS_DRV_DisableDigitalFilter -This function disables digital filter feature for digital pin muxing
   - pin_mux_PINS_DRV_ConfigDigitalFilter -This function configures digital filter for port with given configuration
   - pin_mux_PINS_DRV_GetPortIntFlag -This function reads the entire port interrupt status flag
   - pin_mux_PINS_DRV_ClearPortIntFlagCmd -This function clears the entire port interrupt status flag
   - pin_mux_PINS_DRV_SetGlobalPinControl -This function quickly configures multiple pins within the one port for the same 
                peripheral function with the same pin configuration
   - pin_mux_PINS_DRV_SetGlobalIntControl -This function quickly configures multiple pins within the one port for the same 
                peripheral function with the same interrupt configuration
   - pin_mux_PINS_DRV_GetPinsDirection -This function returns the current pins directions for a port. Pins corresponding to 
                bits with value of '1' are configured as output and pins corresponding to bits with value of '0' are configured 
                as input.
   - pin_mux_PINS_DRV_SetPinDirection -This function configures the direction for the given pin, with the given value('1' for 
                pin to be configured as output and '0' for pin to be configured as input)
   - pin_mux_PINS_DRV_SetPinsDirection -This function sets the direction configuration for all pins in a port. Pins 
                corresponding to bits with value of '1' will be configured as output and pins corresponding to bits with value 
                of '0' will be configured as input.
   - pin_mux_PINS_DRV_WritePin -This function writes the given pin from a port, with the given value ('0' represents LOW, '1' 
                represents HIGH)
   - pin_mux_PINS_DRV_WritePins -This function writes all pins configured as output with the values given in the parameter pins.
                '0' represents LOW, '1' represents HIGH
   - pin_mux_PINS_DRV_GetPinsOutput -This function returns the current output that is written to a port. Only pins that are 
                configured as output will have meaningful values
   - pin_mux_PINS_DRV_SetPins -This function configures output pins listed in parameter pins (bits that are '1') to have a 
                value of 'set' (HIGH). Pins corresponding to '0' will be unaffected
   - pin_mux_PINS_DRV_ClearPins -This function configures output pins listed in parameter pins (bits that are '1') to have a 
                'cleared' value (LOW). Pins corresponding to '0' will be unaffected
   - pin_mux_PINS_DRV_TogglePins -This function toggles output pins listed in parameter pins (bits that are '1'). Pins 
                corresponding to '0' will be unaffected
   - pin_mux_PINS_DRV_ReadPins -This function returns the current input values from a port. Only pins configured as input will 
                have meaningful values

Module "clockMan1" (component clock_manager)
   - clockMan1_CLOCK_DRV_Init -Initialize clocking modules
   - clockMan1_CLOCK_DRV_GetFreq -Return frequency.
   - clockMan1_CLOCK_DRV_SetModuleClock -Configures the system clocks.
   - clockMan1_CLOCK_DRV_SetSystemClock -Configures the system clocks.
   - clockMan1_CLOCK_DRV_GetSystemClockSource -Gets the system clock source.
   - clockMan1_CLOCK_DRV_SetClockSource -This function configures a clock source.

Module "intMan1"   (component interrupt_manager)
   - intMan1_INT_SYS_InstallHandler -Installs an interrupt handler routine for a given IRQ number.
   - intMan1_INT_SYS_EnableIRQ -Enables an interrupt for a given IRQ number.
   - intMan1_INT_SYS_DisableIRQ -Disables an interrupt for a given IRQ number.
   - intMan1_INT_SYS_EnableIRQGlobal -Enables system interrupt.
   - intMan1_INT_SYS_DisableIRQGlobal -Disable system interrupt.
   - intMan1_INT_SYS_SetPriority -Set Interrupt Priority.
   - intMan1_INT_SYS_GetPriority -Get Interrupt Priority.
   - intMan1_INT_SYS_ClearPending -Clear Pending Interrupt.
   - intMan1_INT_SYS_SetPending -Set Pending Interrupt.
   - intMan1_INT_SYS_GetPending -Get Pending Interrupt.

Module "lpi2c1"    (component lpi2c)
   - lpi2c1_LPI2C_DRV_MasterInit -Initialize the LPI2C master mode driver.
   - lpi2c1_LPI2C_DRV_MasterDeinit -De-initialize the LPI2C master mode driver.
   - lpi2c1_LPI2C_DRV_MasterGetBaudRate -Get the currently configured baud rate.
   - lpi2c1_LPI2C_DRV_MasterSetBaudRate -Set the baud rate for any subsequent I2C communication.
   - lpi2c1_LPI2C_DRV_MasterGetDefaultConfig -Gets the default configuration structure for master.
   - lpi2c1_LPI2C_DRV_MasterSetSlaveAddr -Set the slave address for any subsequent I2C communication.
   - lpi2c1_LPI2C_DRV_MasterSendData -Perform a non-blocking send transaction on the I2C bus.
   - lpi2c1_LPI2C_DRV_MasterSendDataBlocking -Perform a blocking send transaction on the I2C bus.
   - lpi2c1_LPI2C_DRV_MasterAbortTransferData -Abort a non-blocking I2C Master transmission or reception.
   - lpi2c1_LPI2C_DRV_MasterReceiveData -Perform a non-blocking receive transaction on the I2C bus.
   - lpi2c1_LPI2C_DRV_MasterReceiveDataBlocking -Perform a blocking receive transaction on the I2C bus.
   - lpi2c1_LPI2C_DRV_MasterGetTransferStatus -Return the current status of the I2C master transfer.
   - lpi2c1_LPI2C_DRV_MasterIRQHandler -Handle master operation when I2C interrupt occurs.
   - lpi2c1_LPI2C_DRV_SlaveInit -Initialize the I2C slave mode driver.
   - lpi2c1_LPI2C_DRV_SlaveDeinit -De-initialize the I2C slave mode driver.
   - lpi2c1_LPI2C_DRV_SlaveSetTxBuffer -Provide a buffer for transmitting data.
   - lpi2c1_LPI2C_DRV_SlaveSetRxBuffer -Provide a buffer for receiving data.
   - lpi2c1_LPI2C_DRV_SlaveSendData -Perform a non-blocking send transaction on the I2C bus.
   - lpi2c1_LPI2C_DRV_SlaveSendDataBlocking -Perform a blocking send transaction on the I2C bus.
   - lpi2c1_LPI2C_DRV_SlaveReceiveData -Perform a non-blocking receive transaction on the I2C bus.
   - lpi2c1_LPI2C_DRV_SlaveReceiveDataBlocking -Perform a blocking receive transaction on the I2C bus.
   - lpi2c1_LPI2C_DRV_SlaveGetTransferStatus -Return the current status of the I2C slave transfer.
   - lpi2c1_LPI2C_DRV_SlaveAbortTransferData -Abort a non-blocking I2C Master transmission or reception.
   - lpi2c1_LPI2C_DRV_SlaveGetDefaultConfig -Gets the default configuration structure for slave
   - lpi2c1_LPI2C_DRV_SlaveIRQHandler -Handle slave operation when I2C interrupt occurs.

Module "osif1"     (component osif)
   - osif1_OSIF_TimeDelay -Delays execution for a number of milliseconds.
   - osif1_OSIF_MutexLock -Waits for a mutex and locks it.
   - osif1_OSIF_MutexUnlock -Unlocks a previously locked mutex.
   - osif1_OSIF_MutexCreate -Create an unlocked mutex.
   - osif1_OSIF_MutexDestroy -Destroys a previously created mutex.
   - osif1_OSIF_SemaWait -Decrement a semaphore with timeout.
   - osif1_OSIF_SemaPost -Increment a semaphore.
   - osif1_OSIF_SemaCreate -Creates a semaphore with a given value.
   - osif1_OSIF_SemaDestroy -Destroys a previously created semaphore.
   - osif1_OSIF_GetMilliseconds -Returns the number of miliseconds elapsed since starting the internal timer or starting the 
                scheduler.

Module "dmaController1" (component edma)
   - dmaController1_EDMA_DRV_Init -Initializes the eDMA module.
   - dmaController1_EDMA_DRV_Deinit -Shuts down the eDMA module.
   - dmaController1_EDMA_DRV_ChannelInit -Initializes a eDMA channel.
   - dmaController1_EDMA_DRV_ReleaseChannel -Releases an eDMA channel.
   - dmaController1_EDMA_DRV_StartChannel -Starts an eDMA channel.
   - dmaController1_EDMA_DRV_StopChannel -Stops the eDMA channel.
   - dmaController1_EDMA_DRV_InstallCallback -Registers the callback function and the parameter for eDMA channel.
   - dmaController1_EDMA_DRV_GetChannelStatus -Gets the eDMA channel status.
   - dmaController1_EDMA_DRV_PushConfigToReg -Copies the channel configuration to the TCD registers.
   - dmaController1_EDMA_DRV_PushConfigToSTCD -Copies the channel configuration to the software TCD structure.
   - dmaController1_EDMA_DRV_ConfigSingleBlockTransfer -Configures a simple single block data transfer with DMA. This function 
                configures the descriptor for a single block transfer.
   - dmaController1_EDMA_DRV_ConfigLoopTransfer -Configures the DMA transfer in loop mode.
   - dmaController1_EDMA_DRV_ConfigScatterGatherTransfer -Configures the DMA transfer in a scatter-gather mode.
   - dmaController1_EDMA_DRV_ConfigMultiBlockTransfer -Configures a multiple block data transfer with DMA. This function 
                configures the descriptor for a multi block transfer.
   - dmaController1_EDMA_DRV_CancelTransfer -Cancels the remaining data transfer.
   - dmaController1_EDMA_DRV_SetChannelRequestAndTrigger -Configures the DMA request and periodic trigger for the eDMA channel.
   - dmaController1_EDMA_DRV_ClearTCD -Clears all registers to 0 for the channel's TCD.
   - dmaController1_EDMA_DRV_SetSrcAddr -Configures the source address for the eDMA channel.
   - dmaController1_EDMA_DRV_SetSrcOffset -Configures the source address signed offset for the eDMA channel.
   - dmaController1_EDMA_DRV_SetSrcReadChunkSize -Configures the source data chunk size (transferred in a read sequence).
   - dmaController1_EDMA_DRV_SetDestAddr -Configures the destination address for the eDMA channel.
   - dmaController1_EDMA_DRV_SetDestOffset -Configures the destination address signed offset for the eDMA channel.
   - dmaController1_EDMA_DRV_SetDestWriteChunkSize -Configures the destination data chunk size (transferred in a write sequence)
                .
   - dmaController1_EDMA_DRV_SetMinorLoopBlockSize -Configures the number of bytes to be transferred in each service request of 
                the channel.
   - dmaController1_EDMA_DRV_SetMajorLoopIterationCount -Configures the number of major loop iterations.
   - dmaController1_EDMA_DRV_GetRemainingMajorIterationsCount -Returns the remaining major loop iteration count.
   - dmaController1_EDMA_DRV_SetScatterGatherLink -Configures the memory address of the next TCD, in scatter/gather mode.
   - dmaController1_EDMA_DRV_DisableRequestsOnTransferComplete -Disables/Enables the DMA request after the major loop completes 
                for the TCD.
   - dmaController1_EDMA_DRV_SetSrcLastAddrAdjustment -Configures the source address last adjustment.
   - dmaController1_EDMA_DRV_SetDestLastAddrAdjustment -Configures the destination address last adjustment.
   - dmaController1_EDMA_DRV_ConfigureInterrupt -Disables/Enables the channel interrupt requests.
   - dmaController1_EDMA_DRV_TriggerSwRequest -Triggers a sw request for the current channel.

Module "flexio_uart1" (component flexio_uart)
   - flexio_uart1_FLEXIO_DRV_InitDevice -Initializes the FlexIO device.
   - flexio_uart1_FLEXIO_DRV_DeinitDevice -De-initializes the FlexIO device.
   - flexio_uart1_FLEXIO_DRV_Reset -Resets the FlexIO device.
   - flexio_uart1_FLEXIO_UART_DRV_Init -Initialize the FLEXIO_UART driver.
   - flexio_uart1_FLEXIO_UART_DRV_Deinit -De-initialize the FLEXIO_UART driver.
   - flexio_uart1_FLEXIO_UART_DRV_SetConfig -Set the baud rate and bit width for any subsequent UART communication.
   - flexio_uart1_FLEXIO_UART_DRV_GetBaudRate -Get the currently configured baud rate.
   - flexio_uart1_FLEXIO_UART_DRV_SendDataBlocking -Perform a blocking UART transmission.
   - flexio_uart1_FLEXIO_UART_DRV_SendData -Perform a non-blocking UART transmission.
   - flexio_uart1_FLEXIO_UART_DRV_ReceiveDataBlocking -Perform a blocking UART reception.
   - flexio_uart1_FLEXIO_UART_DRV_ReceiveData -Perform a non-blocking UART reception.
   - flexio_uart1_FLEXIO_UART_DRV_GetStatus -Get the status of the current non-blocking UART transfer.
   - flexio_uart1_FLEXIO_UART_DRV_TransferAbort -Aborts a non-blocking UART transfer.
   - flexio_uart1_FLEXIO_UART_DRV_SetRxBuffer -Provide a buffer for receiving data.
   - flexio_uart1_FLEXIO_UART_DRV_SetTxBuffer -Provide a buffer for transmitting data.
   - flexio_uart1_FLEXIO_UART_DRV_GetDefaultConfig -Returns default configuration structure for FLEXIO_UART.

Module "lpit1"     (component lpit)
   - lpit1_LPIT_DRV_GetDefaultConfig -Gets default LPIT module configuration structure
   - lpit1_LPIT_DRV_GetDefaultChanConfig -Gets default timer channel configuration structure
   - lpit1_LPIT_DRV_Init -Initializes the LPIT module.
   - lpit1_LPIT_DRV_Deinit -De-initializes LPIT module.
   - lpit1_LPIT_DRV_InitChannel -Initializes the LPIT channel.
   - lpit1_LPIT_DRV_StartTimerChannels -Starts the timer channel counting.
   - lpit1_LPIT_DRV_StopTimerChannels -Stops the timer channel counting.
   - lpit1_LPIT_DRV_SetTimerPeriodByUs -Sets the timer channel period in microseconds.
   - lpit1_LPIT_DRV_SetTimerPeriodInDual16ModeByUs -Sets the timer channel period in microseconds when the timer channel mode 
                is dual 16 bit periodic counter.
   - lpit1_LPIT_DRV_GetTimerPeriodByUs -Gets the timer channel period in microseconds.
   - lpit1_LPIT_DRV_GetCurrentTimerUs -Gets the current timer channel counting value in microseconds.
   - lpit1_LPIT_DRV_SetTimerPeriodByCount -Sets the timer channel period in count unit.
   - lpit1_LPIT_DRV_SetTimerPeriodInDual16ModeByCount -Sets the timer channel period in count when the timer channel mode is 
                dual 16 bit periodic counter.
   - lpit1_LPIT_DRV_GetTimerPeriodByCount -Gets the current timer channel period in count unit.
   - lpit1_LPIT_DRV_GetCurrentTimerCount -Gets the current timer channel counting value in count.
   - lpit1_LPIT_DRV_EnableTimerChannelInterrupt -Enables the interrupt generation of timer channel.
   - lpit1_LPIT_DRV_DisableTimerChannelInterrupt -Disables the interrupt generation of timer channel.
   - lpit1_LPIT_DRV_GetInterruptFlagTimerChannels -Gets the current interrupt flag of timer channels.
   - lpit1_LPIT_DRV_ClearInterruptFlagTimerChannels -Clears the interrupt flag of timer channels.

Module "flexio_i2c1" (component flexio_i2c)
   - flexio_i2c1_FLEXIO_DRV_InitDevice -Initializes the FlexIO device.
   - flexio_i2c1_FLEXIO_DRV_DeinitDevice -De-initializes the FlexIO device.
   - flexio_i2c1_FLEXIO_DRV_Reset -Resets the FlexIO device.
   - flexio_i2c1_FLEXIO_I2C_DRV_MasterInit -Initialize the FLEXIO_I2C master mode driver.
   - flexio_i2c1_FLEXIO_I2C_DRV_MasterDeinit -De-initialize the FLEXIO_I2C master mode driver.
   - flexio_i2c1_FLEXIO_I2C_DRV_MasterSetBaudRate -Set the baud rate for any subsequent I2C communication.
   - flexio_i2c1_FLEXIO_I2C_DRV_MasterGetBaudRate -Get the currently configured baud rate.
   - flexio_i2c1_FLEXIO_I2C_DRV_MasterSetSlaveAddr -Set the slave address for any subsequent I2C communication.
   - flexio_i2c1_FLEXIO_I2C_DRV_MasterSendData -Perform a non-blocking send transaction on the I2C bus.
   - flexio_i2c1_FLEXIO_I2C_DRV_MasterSendDataBlocking -Perform a blocking send transaction on the I2C bus.
   - flexio_i2c1_FLEXIO_I2C_DRV_MasterReceiveData -Perform a non-blocking receive transaction on the I2C bus.
   - flexio_i2c1_FLEXIO_I2C_DRV_MasterReceiveDataBlocking -Perform a blocking receive transaction on the I2C bus.
   - flexio_i2c1_FLEXIO_I2C_DRV_MasterTransferAbort -Aborts a non-blocking I2C master transaction.
   - flexio_i2c1_FLEXIO_I2C_DRV_MasterGetStatus -Get the status of the current non-blocking I2C master transaction.
   - flexio_i2c1_FLEXIO_I2C_DRV_GetDefaultConfig -Returns default configuration structure for FLEXIO_I2C.

Module "lpTmr1"    (component lptmr)
   - lpTmr1_LPTMR_DRV_InitConfigStruct -Initialize configuration structure.
   - lpTmr1_LPTMR_DRV_Init -Initializes the LPTMR as Timer or Pulse Counter
   - lpTmr1_LPTMR_DRV_SetConfig -Configure a LPTMR instance.
   - lpTmr1_LPTMR_DRV_GetConfig -Get the current configuration of a LPTMR instance.
   - lpTmr1_LPTMR_DRV_Deinit -Deinitializes a LPTMR instance.
   - lpTmr1_LPTMR_DRV_SetCompareValueByCount -Change the Compare Value in counter tick units.
   - lpTmr1_LPTMR_DRV_GetCompareValueByCount -Get the Compare Value in counter tick units.
   - lpTmr1_LPTMR_DRV_SetCompareValueByUs -Set the compare value for Timer Mode in microseconds.
   - lpTmr1_LPTMR_DRV_GetCompareValueByUs -Get the Compare Value in microseconds.
   - lpTmr1_LPTMR_DRV_GetCompareFlag -Get the current state of the Compare Flag (Interrupt Pending)
   - lpTmr1_LPTMR_DRV_ClearCompareFlag -Clear the Compare/Interrupt Pending Flag.
   - lpTmr1_LPTMR_DRV_IsRunning -Get the run state of a LPTMR instance.
   - lpTmr1_LPTMR_DRV_SetInterrupt -Enable/disable the LPTMR interrupt
   - lpTmr1_LPTMR_DRV_GetCounterValueByCount -Get the current counter value in counter tick units.
   - lpTmr1_LPTMR_DRV_StartCounter -Enable the LPTMR / Start the counter.
   - lpTmr1_LPTMR_DRV_StopCounter -Disable the LPTMR / Stop the counter.
   - lpTmr1_LPTMR_DRV_SetPinConfiguration -Set the Input Pin configuration for Pulse Counter mode.

Module "watchdog1" (component wdog)
   - watchdog1_WDOG_DRV_Init -Initializes the WDOG driver.
   - watchdog1_WDOG_DRV_Deinit -De-initializes the WDOG driver.
   - watchdog1_WDOG_DRV_GetConfig -Gets the current configuration of the WDOG.
   - watchdog1_WDOG_DRV_GetDefaultConfig -Gets default configuration of the WDOG.
   - watchdog1_WDOG_DRV_SetInt -Enables/Disables the WDOG timeout interrupt and sets a function to be called when a timeout 
                interrupt is received, before reset.
   - watchdog1_WDOG_DRV_ClearIntFlag -Clear interrupt flag of the WDOG.
   - watchdog1_WDOG_DRV_Trigger -Refreshes the WDOG counter.
   - watchdog1_WDOG_DRV_GetCounter -Gets the value of the WDOG counter.
   - watchdog1_WDOG_DRV_SetWindow -Set window mode and window value of the WDOG.
   - watchdog1_WDOG_DRV_SetMode -Sets the mode operation of the WDOG.
   - watchdog1_WDOG_DRV_SetTimeout -Sets the value of the WDOG timeout.
   - watchdog1_WDOG_DRV_SetTestMode -This function changes the test mode of the WDOG. If the WDOG is tested in mode, software 
                should set this field to 0x01U in order to indicate that the WDOG is functioning normally.
   - watchdog1_WDOG_DRV_GetTestMode -This function verifies the test mode of the WDOG.

Module "lin_cfg"   (component LinStack)

Module "Cpu"       (component S32K116_48)
   - Cpu_SystemInit -This function disables the watchdog, enables FPU and the power mode protection. SystemInit is called from 
                startup_device file.
   - Cpu_SystemCoreClockUpdate -SystemCoreClockUpdate evaluates the clock register settings and calculates the current core 
                clock. It must be called whenever the core clock is changed during program execution
   - Cpu_SystemSoftwareReset -This method initiates initiate a system reset.

===================================================================================
